#! /usr/bin/perl -w

$seed = 17;
srand($seed);
$N = 200;  # number of insert! vectors to generate

print "
    ; Generated by script '$0'
    (load \"ntable.scm\")  ; EDIT HERE: load the implementation under test
    (define t1 (make-table))  ; EDIT HERE: the constructor
    (define t2 (make-table))  ; EDIT HERE: the constructor

    (insert! t1 '() 'special-case)
    (if (equal? 'special-case (lookup t1 '())) 'match (error \"Error: Mismatch special case\"))
";

# Fisher_yates_shuffle( \@array ) : generate a random permutation of @array in place
# From https://www.oreilly.com/library/view/perl-cookbook/1565922433/ch04s18.html
#
sub fisher_yates_shuffle {
    my $array = shift;
    my $i;
    for ($i = @$array; --$i; ) {
        my $j = int rand ($i+1);
        next if $i == $j;
        @$array[$i,$j] = @$array[$j,$i];
    }
}

{ no warnings 'qw';
@Sym = qw( 'dog  'cat 'owl 'fox 'pig 'cow 'jay 'eel
        sin assoc cdr car list
	1 2 3 4 5 6 7
	#t
	'() '(one)
	"yarn" "rope" "cord" "twine"
	3.1416 1.4142 1.618 1.7321 2.2361);}
push @Sym,  "'(romeo juliet)";
push @Sym,  "'(larry moe curly)";
push @Sym,  "'(1 . 2)";
push @Sym,  "'(a . b)";

#print "@Sym\n";	# debugging

@Stim = ();  # stimulus vectors
for (1..2*$N) {
    my $r = rand;
    my $table = ($_ % 2) ? 't1' : 't2';

    fisher_yates_shuffle (\@Sym);
    SWITCH: {
        if ($r < 0.20) { $len = 5; last SWITCH};
        if ($r < 0.40) { $len = 4; last SWITCH};
        if ($r < 0.60) { $len = 3; last SWITCH};
        if ($r < 0.80) { $len = 2; last SWITCH};
	$len = 1;
    }
    my $s =  "$Sym[0] :: @Sym[1..$len] :: $len :: $table";
    #print "$s\n";  # debugging
    push @Stim, $s;
}

fisher_yates_shuffle (\@Stim);
$cnt = 0;
for (1..$N) {
    my ($pattern) = $Stim[$cnt++];
    my ($v, $list, $len, $tbl) = split /::/, $pattern;
    printf("%-60s ;klist length=$len\n", "(insert! $tbl  (list $list)  $v)"); # \t;klist length=$len\n";
    $Hash{$tbl.$list} = $v;  # the reference model
}

fisher_yates_shuffle (\@Stim);
$cnt = 0;
for (1..2*$N) {
    my ($pattern) = $Stim[$cnt++];
    my ($v, $list, $dontcare, $tbl) = split /::/, $pattern;
    my ($expected) = $Hash{$tbl.$list};
    $expected = !defined($expected) ? '#f' : $expected;
    print "(if (equal? $expected (lookup $tbl (list $list))   ) 'match (error \"Error: Mismatch:\" $cnt))\n";
}