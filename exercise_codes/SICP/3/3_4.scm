(load "3_1.scm")
;; repo adds the implementation of action after already call-the-cops by `(>= incorrect-pw-count incorrect-pw-limit)` before actual valid actions.
(define (make-account balance secret-password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((count (make-accumulator 0)))
    (define (dispatch password m)
      (if (equal? secret-password password)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request -- MAKE-ACCOUNT"
                          m)))
        (lambda (amount)
          (count 1)
          (if (> (count 0) 7)
            (display "call-the-cops") ; for simplicity, I assume this func just returns one symbol.
            "Incorrect password"))))
    dispatch))

(define (test)
  (define acc (make-account 100 'secret-password))
  (do ((i 0 (+ i 1)))
    ((= i 8) 'done)
    ((acc 'some-other-password 'deposit) 50)))
(test)

;; wiki Igor Saprykin
(define (make-account balance password) 
  (define (call-the-cops) (display "Call the cops")) 
  (let ((count 0) 
        (limit 7)) 
    (define (withdraw amount) 
      (if (>= balance amount) 
          (begin (set! balance (- balance amount)) 
                balance) 
          "Not enough money")) 
    (define (deposit amount) 
      (set! balance (+ balance amount)) 
      balance) 
    (define (dispatch pass m) 
      (if (not (eq? pass password)) 
          (lambda (amount) 
            (set! count (+ count 1))
            (if (> count limit) 
                (call-the-cops)
                "Wrong password")) 
          (begin (set! count 0) 
                (cond ((eq? m 'withdraw) withdraw) 
                      ((eq? m 'deposit) deposit) 
                      (else (error "Unknown call -- MAKE-ACCOUNT" 
                                    m)))))) 
      dispatch))
(test)

(define (test-1 x)
  (define (test-2)
    (define x 2)
    (display (list "inner" x)))
  (test-2)
  (display (list "outer" x)))
(test-1 1)