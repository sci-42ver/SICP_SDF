;; added
(define nil '())
(define map
  (lambda (proc items)
    (if (null? items)
      nil
      (cons (proc (car items))
            (map proc (cdr items))))))

(define (enumerate-interval l h) 
  (if (> l h) 
      '() 
      (cons l (enumerate-interval (+ l 1) h)))) 

(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
;; from http://community.schemewiki.org/?sicp-ex-4.41
;; As book p167 shows, here result should be assumed to be all lists, so all append.
(define (flatmap proc li) 
  (if (null? li) 
      '() 
      (let ((result (proc (car li))) 
            (rest (flatmap proc (cdr li)))) 
        (if (pair? result) 
            (append result rest) 
            (cons result rest))))) 

(define empty-board '()) 
(define (adjoin-position row col rest) 
  (cons (list row col) rest)) 
(define (exclude item lst) 
  (define (scan items) 
    (cond ((null? items) 
           '()) 
          ((equal? item (car items)) 
           (scan (cdr items))) 
          (else (cons (car items) (scan (cdr items)))))) 
  (scan lst)) 
(define (safe? col positions) 
  (define (iter l) 
    (if (null? l) 
      true 
      (and (car l) (iter (cdr l)))))
  (let ((row (caar (filter (lambda (p) 
                             (eq? col (cadr p))) 
                           positions)))) 
    (iter (map (lambda (p) 
                 (not (or (eq? row (car p)) 
                          (eq? (- row col) (- (car p) (cadr p))) 
                          (eq? (+ row col) (+ (car p) (cadr p)))))) 
               (exclude (list row col) positions))))) 
(define (queens board-size) 
  (define (queen-cols k) 
    (if (= k 0) 
      (list empty-board) 
      ;; modified
      (filter (lambda (positions) (safe? k positions)) 
        (flatmap (lambda (rest-of-queens) 
                  (map 
                    (lambda (row)
                      (adjoin-position row k rest-of-queens))
                    (enumerate-interval 1 board-size))) 
                (queen-cols (- k 1)))))) 
  (queen-cols board-size)) 
(assert (= 92 (length (queens 8))))
(define queens-8 (queens 8))
;; The traversal order is same as the corresponding amb one
;; where the former elements are always choosenby the latter.
;; The differences is that here we let *all possible filtered* elements left.
;; But amb just chooses the *1st*, i.e. the *1st* in the filtered elem-list.
;; So outputs the same 1st result when they have the same ordering.
; (((4 8) (2 7) (7 6) (3 5) (6 4) (8 3) (5 2) (1 1)) ((5 8) (2 7) (4 6) (7 5) (3 4) (8 3) (6 2) (1 1)) ((3 8) (5 7) (2 6) (8 5) (6 4) (4 3) (7 2) (1 1)) ((3 8) (6 7) (4 6) (2 5) (8 4) (5 3) (7 2) (1 1)) ((5 8) (7 7) (1 6) (3 5) (8 4) (6 3) (4 2) (2 1)) ((4 8) (6 7) (8 6) (3 5) (1 4) (7 3) (5 2) (2 1)) ((3 8) (6 7) (8 6) (1 5) (4 4) (7 3) (5 2) (2 1)) ((5 8) (3 7) (8 6) (4 5) (7 4) (1 3) (6 2) (2 1)) ((5 8) (7 7) (4 6) (1 5) (3 4) (8 3) (6 2) (2 1)) ((4 8) (1 7) (5 6) (8 5) (6 4) (3 3) (7 2) (2 1)) ((3 8) (6 7) (4 6) (1 5) (8 4) (5 3) (7 2) (2 1)) ((4 8) (7 7) (5 6) (3 5) (1 4) (6 3) (8 2) (2 1)) ((6 8) (4 7) (2 6) (8 5) (5 4) (7 3) (1 2) (3 1)) ((6 8) (4 7) (7 6) (1 5) (8 4) (2 3) (5 2) (3 1)) ((1 8) (7 7) (4 6) (6 5) (8 4) (2 3) (5 2) (3 1)) ((6 8) (8 7) (2 6) (4 5) (1 4) (7 3) (5 2) (3 1)) ((6 8) (2 7) (7 6) (1 5) (4 4) (8 3) (5 2) (3 1)) ((4 8) (7 7) (1 6) (8 5) (5 4) (2 3) (6 2) (3 1)) ((5 8) (8 7) (4 6) (1 5) (7 4) (2 3) (6 2) (3 1)) ((4 8) (8 7) (1 6) (5 5) (7 4) (2 3) (6 2) (3 1)) ((2 8) (7 7) (5 6) (8 5) (1 4) (4 3) (6 2) (3 1)) ((1 8) (7 7) (5 6) (8 5) (2 4) (4 3) (6 2) (3 1)) ((2 8) (5 7) (7 6) (4 5) (1 4) (8 3) (6 2) (3 1)) ((4 8) (2 7) (7 6) (5 5) (1 4) (8 3) (6 2) (3 1)) ((5 8) (7 7) (1 6) (4 5) (2 4) (8 3) (6 2) (3 1)) ((6 8) (4 7) (1 6) (5 5) (8 4) (2 3) (7 2) (3 1)) ((5 8) (1 7) (4 6) (6 5) (8 4) (2 3) (7 2) (3 1)) ((5 8) (2 7) (6 6) (1 5) (7 4) (4 3) (8 2) (3 1)) ((6 8) (3 7) (7 6) (2 5) (8 4) (5 3) (1 2) (4 1)) ((2 8) (7 7) (3 6) (6 5) (8 4) (5 3) (1 2) (4 1)) ((7 8) (3 7) (1 6) (6 5) (8 4) (5 3) (2 2) (4 1)) ((5 8) (1 7) (8 6) (6 5) (3 4) (7 3) (2 2) (4 1)) ((1 8) (5 7) (8 6) (6 5) (3 4) (7 3) (2 2) (4 1)) ((3 8) (6 7) (8 6) (1 5) (5 4) (7 3) (2 2) (4 1)) ((6 8) (3 7) (1 6) (7 5) (5 4) (8 3) (2 2) (4 1)) ((7 8) (5 7) (3 6) (1 5) (6 4) (8 3) (2 2) (4 1)) ((7 8) (3 7) (8 6) (2 5) (5 4) (1 3) (6 2) (4 1)) ((5 8) (3 7) (1 6) (7 5) (2 4) (8 3) (6 2) (4 1)) ((2 8) (5 7) (7 6) (1 5) (3 4) (8 3) (6 2) (4 1)) ((3 8) (6 7) (2 6) (5 5) (8 4) (1 3) (7 2) (4 1)) ((6 8) (1 7) (5 6) (2 5) (8 4) (3 3) (7 2) (4 1)) ((8 8) (3 7) (1 6) (6 5) (2 4) (5 3) (7 2) (4 1)) ((2 8) (8 7) (6 6) (1 5) (3 4) (5 3) (7 2) (4 1)) ((5 8) (7 7) (2 6) (6 5) (3 4) (1 3) (8 2) (4 1)) ((3 8) (6 7) (2 6) (7 5) (5 4) (1 3) (8 2) (4 1)) ((6 8) (2 7) (7 6) (1 5) (3 4) (5 3) (8 2) (4 1)) ((3 8) (7 7) (2 6) (8 5) (6 4) (4 3) (1 2) (5 1)) ((6 8) (3 7) (7 6) (2 5) (4 4) (8 3) (1 2) (5 1)) ((4 8) (2 7) (7 6) (3 5) (6 4) (8 3) (1 2) (5 1)) ((7 8) (1 7) (3 6) (8 5) (6 4) (4 3) (2 2) (5 1)) ((1 8) (6 7) (8 6) (3 5) (7 4) (4 3) (2 2) (5 1)) ((3 8) (8 7) (4 6) (7 5) (1 4) (6 3) (2 2) (5 1)) ((6 8) (3 7) (7 6) (4 5) (1 4) (8 3) (2 2) (5 1)) ((7 8) (4 7) (2 6) (8 5) (6 4) (1 3) (3 2) (5 1)) ((4 8) (6 7) (8 6) (2 5) (7 4) (1 3) (3 2) (5 1)) ((2 8) (6 7) (1 6) (7 5) (4 4) (8 3) (3 2) (5 1)) ((2 8) (4 7) (6 6) (8 5) (3 4) (1 3) (7 2) (5 1)) ((3 8) (6 7) (8 6) (2 5) (4 4) (1 3) (7 2) (5 1)) ((6 8) (3 7) (1 6) (8 5) (4 4) (2 3) (7 2) (5 1)) ((8 8) (4 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1)) ((4 8) (8 7) (1 6) (3 5) (6 4) (2 3) (7 2) (5 1)) ((2 8) (6 7) (8 6) (3 5) (1 4) (4 3) (7 2) (5 1)) ((7 8) (2 7) (6 6) (3 5) (1 4) (4 3) (8 2) (5 1)) ((3 8) (6 7) (2 6) (7 5) (1 4) (4 3) (8 2) (5 1)) ((4 8) (7 7) (3 6) (8 5) (2 4) (5 3) (1 2) (6 1)) ((4 8) (8 7) (5 6) (3 5) (1 4) (7 3) (2 2) (6 1)) ((3 8) (5 7) (8 6) (4 5) (1 4) (7 3) (2 2) (6 1)) ((4 8) (2 7) (8 6) (5 5) (7 4) (1 3) (3 2) (6 1)) ((5 8) (7 7) (2 6) (4 5) (8 4) (1 3) (3 2) (6 1)) ((7 8) (4 7) (2 6) (5 5) (8 4) (1 3) (3 2) (6 1)) ((8 8) (2 7) (4 6) (1 5) (7 4) (5 3) (3 2) (6 1)) ((7 8) (2 7) (4 6) (1 5) (8 4) (5 3) (3 2) (6 1)) ((5 8) (1 7) (8 6) (4 5) (2 4) (7 3) (3 2) (6 1)) ((4 8) (1 7) (5 6) (8 5) (2 4) (7 3) (3 2) (6 1)) ((5 8) (2 7) (8 6) (1 5) (4 4) (7 3) (3 2) (6 1)) ((3 8) (7 7) (2 6) (8 5) (5 4) (1 3) (4 2) (6 1)) ((3 8) (1 7) (7 6) (5 5) (8 4) (2 3) (4 2) (6 1)) ((8 8) (2 7) (5 6) (3 5) (1 4) (7 3) (4 2) (6 1)) ((3 8) (5 7) (2 6) (8 5) (1 4) (7 3) (4 2) (6 1)) ((3 8) (5 7) (7 6) (1 5) (4 4) (2 3) (8 2) (6 1)) ((5 8) (2 7) (4 6) (6 5) (8 4) (3 3) (1 2) (7 1)) ((6 8) (3 7) (5 6) (8 5) (1 4) (4 3) (2 2) (7 1)) ((5 8) (8 7) (4 6) (1 5) (3 4) (6 3) (2 2) (7 1)) ((4 8) (2 7) (5 6) (8 5) (6 4) (1 3) (3 2) (7 1)) ((4 8) (6 7) (1 6) (5 5) (2 4) (8 3) (3 2) (7 1)) ((6 8) (3 7) (1 6) (8 5) (5 4) (2 3) (4 2) (7 1)) ((5 8) (3 7) (1 6) (6 5) (8 4) (2 3) (4 2) (7 1)) ((4 8) (2 7) (8 6) (6 5) (1 4) (3 3) (5 2) (7 1)) ((6 8) (3 7) (5 6) (7 5) (1 4) (4 3) (2 2) (8 1)) ((6 8) (4 7) (7 6) (1 5) (3 4) (5 3) (2 2) (8 1)) ((4 8) (7 7) (5 6) (2 5) (6 4) (1 3) (3 2) (8 1)) ((5 8) (7 7) (2 6) (6 5) (3 4) (1 3) (4 2) (8 1)))
(define (sort-car queens-cand)
  (sort queens-cand < car))
(map sort-car queens-8)
; (((1 1) (2 7) (3 5) (4 8) (5 2) (6 4) (7 6) (8 3)) ((1 1) (2 7) (3 4) (4 6) (5 8) (6 2) (7 5) (8 3)) ((1 1) (2 6) (3 8) (4 3) (5 7) (6 4) (7 2) (8 5)) ((1 1) (2 5) (3 8) (4 6) (5 3) (6 7) (7 2) (8 4)) ((1 6) (2 1) (3 5) (4 2) (5 8) (6 3) (7 7) (8 4)) ((1 4) (2 1) (3 5) (4 8) (5 2) (6 7) (7 3) (8 6)) ((1 5) (2 1) (3 8) (4 4) (5 2) (6 7) (7 3) (8 6)) ((1 3) (2 1) (3 7) (4 5) (5 8) (6 2) (7 4) (8 6)) ((1 5) (2 1) (3 4) (4 6) (5 8) (6 2) (7 7) (8 3)) ((1 7) (2 1) (3 3) (4 8) (5 6) (6 4) (7 2) (8 5)) ((1 5) (2 1) (3 8) (4 6) (5 3) (6 7) (7 2) (8 4)) ((1 4) (2 1) (3 5) (4 8) (5 6) (6 3) (7 7) (8 2)) ((1 2) (2 6) (3 1) (4 7) (5 4) (6 8) (7 3) (8 5)) ((1 5) (2 3) (3 1) (4 7) (5 2) (6 8) (7 6) (8 4)) ((1 8) (2 3) (3 1) (4 6) (5 2) (6 5) (7 7) (8 4)) ((1 4) (2 6) (3 1) (4 5) (5 2) (6 8) (7 3) (8 7)) ((1 5) (2 7) (3 1) (4 4) (5 2) (6 8) (7 6) (8 3)) ((1 6) (2 3) (3 1) (4 8) (5 4) (6 2) (7 7) (8 5)) ((1 5) (2 3) (3 1) (4 6) (5 8) (6 2) (7 4) (8 7)) ((1 6) (2 3) (3 1) (4 8) (5 5) (6 2) (7 4) (8 7)) ((1 4) (2 8) (3 1) (4 3) (5 6) (6 2) (7 7) (8 5)) ((1 8) (2 4) (3 1) (4 3) (5 6) (6 2) (7 7) (8 5)) ((1 4) (2 8) (3 1) (4 5) (5 7) (6 2) (7 6) (8 3)) ((1 4) (2 7) (3 1) (4 8) (5 5) (6 2) (7 6) (8 3)) ((1 6) (2 4) (3 1) (4 5) (5 8) (6 2) (7 7) (8 3)) ((1 6) (2 3) (3 1) (4 7) (5 5) (6 8) (7 2) (8 4)) ((1 7) (2 3) (3 1) (4 6) (5 8) (6 5) (7 2) (8 4)) ((1 5) (2 7) (3 1) (4 3) (5 8) (6 6) (7 4) (8 2)) ((1 2) (2 5) (3 7) (4 1) (5 3) (6 8) (7 6) (8 4)) ((1 2) (2 8) (3 6) (4 1) (5 3) (6 5) (7 7) (8 4)) ((1 6) (2 2) (3 7) (4 1) (5 3) (6 5) (7 8) (8 4)) ((1 7) (2 2) (3 4) (4 1) (5 8) (6 5) (7 3) (8 6)) ((1 8) (2 2) (3 4) (4 1) (5 7) (6 5) (7 3) (8 6)) ((1 5) (2 2) (3 8) (4 1) (5 4) (6 7) (7 3) (8 6)) ((1 6) (2 2) (3 7) (4 1) (5 4) (6 8) (7 5) (8 3)) ((1 5) (2 2) (3 6) (4 1) (5 7) (6 4) (7 8) (8 3)) ((1 3) (2 5) (3 7) (4 1) (5 4) (6 2) (7 8) (8 6)) ((1 6) (2 4) (3 7) (4 1) (5 8) (6 2) (7 5) (8 3)) ((1 5) (2 8) (3 4) (4 1) (5 7) (6 2) (7 6) (8 3)) ((1 3) (2 6) (3 8) (4 1) (5 5) (6 7) (7 2) (8 4)) ((1 7) (2 5) (3 3) (4 1) (5 6) (6 8) (7 2) (8 4)) ((1 6) (2 4) (3 7) (4 1) (5 3) (6 5) (7 2) (8 8)) ((1 5) (2 8) (3 4) (4 1) (5 3) (6 6) (7 2) (8 7)) ((1 3) (2 6) (3 4) (4 1) (5 8) (6 5) (7 7) (8 2)) ((1 3) (2 6) (3 8) (4 1) (5 4) (6 7) (7 5) (8 2)) ((1 5) (2 7) (3 4) (4 1) (5 3) (6 8) (7 6) (8 2)) ((1 2) (2 6) (3 8) (4 3) (5 1) (6 4) (7 7) (8 5)) ((1 2) (2 5) (3 7) (4 4) (5 1) (6 8) (7 6) (8 3)) ((1 2) (2 7) (3 5) (4 8) (5 1) (6 4) (7 6) (8 3)) ((1 7) (2 2) (3 6) (4 3) (5 1) (6 4) (7 8) (8 5)) ((1 8) (2 2) (3 5) (4 3) (5 1) (6 7) (7 4) (8 6)) ((1 4) (2 2) (3 8) (4 6) (5 1) (6 3) (7 5) (8 7)) ((1 4) (2 2) (3 7) (4 5) (5 1) (6 8) (7 6) (8 3)) ((1 3) (2 6) (3 2) (4 7) (5 1) (6 4) (7 8) (8 5)) ((1 3) (2 5) (3 2) (4 8) (5 1) (6 7) (7 4) (8 6)) ((1 6) (2 8) (3 2) (4 4) (5 1) (6 7) (7 5) (8 3)) ((1 3) (2 8) (3 4) (4 7) (5 1) (6 6) (7 2) (8 5)) ((1 3) (2 5) (3 8) (4 4) (5 1) (6 7) (7 2) (8 6)) ((1 6) (2 3) (3 7) (4 4) (5 1) (6 8) (7 2) (8 5)) ((1 6) (2 3) (3 5) (4 7) (5 1) (6 4) (7 2) (8 8)) ((1 6) (2 3) (3 5) (4 8) (5 1) (6 4) (7 2) (8 7)) ((1 4) (2 8) (3 5) (4 3) (5 1) (6 7) (7 2) (8 6)) ((1 4) (2 7) (3 5) (4 3) (5 1) (6 6) (7 8) (8 2)) ((1 4) (2 6) (3 8) (4 3) (5 1) (6 7) (7 5) (8 2)) ((1 2) (2 4) (3 6) (4 8) (5 3) (6 1) (7 7) (8 5)) ((1 4) (2 2) (3 5) (4 8) (5 6) (6 1) (7 3) (8 7)) ((1 4) (2 2) (3 8) (4 5) (5 7) (6 1) (7 3) (8 6)) ((1 3) (2 7) (3 2) (4 8) (5 5) (6 1) (7 4) (8 6)) ((1 3) (2 6) (3 2) (4 5) (5 8) (6 1) (7 7) (8 4)) ((1 3) (2 6) (3 2) (4 7) (5 5) (6 1) (7 8) (8 4)) ((1 5) (2 7) (3 2) (4 6) (5 3) (6 1) (7 4) (8 8)) ((1 5) (2 7) (3 2) (4 6) (5 3) (6 1) (7 8) (8 4)) ((1 7) (2 4) (3 2) (4 5) (5 8) (6 1) (7 3) (8 6)) ((1 7) (2 4) (3 2) (4 8) (5 6) (6 1) (7 3) (8 5)) ((1 5) (2 7) (3 2) (4 4) (5 8) (6 1) (7 3) (8 6)) ((1 3) (2 6) (3 8) (4 2) (5 4) (6 1) (7 7) (8 5)) ((1 7) (2 3) (3 8) (4 2) (5 5) (6 1) (7 6) (8 4)) ((1 4) (2 7) (3 5) (4 2) (5 6) (6 1) (7 3) (8 8)) ((1 4) (2 6) (3 8) (4 2) (5 7) (6 1) (7 3) (8 5)) ((1 5) (2 3) (3 8) (4 4) (5 7) (6 1) (7 6) (8 2)) ((1 2) (2 7) (3 3) (4 6) (5 8) (6 5) (7 1) (8 4)) ((1 4) (2 2) (3 7) (4 3) (5 6) (6 8) (7 1) (8 5)) ((1 5) (2 2) (3 4) (4 6) (5 8) (6 3) (7 1) (8 7)) ((1 3) (2 7) (3 2) (4 8) (5 6) (6 4) (7 1) (8 5)) ((1 6) (2 4) (3 2) (4 8) (5 5) (6 7) (7 1) (8 3)) ((1 6) (2 3) (3 7) (4 2) (5 4) (6 8) (7 1) (8 5)) ((1 6) (2 3) (3 7) (4 2) (5 8) (6 5) (7 1) (8 4)) ((1 4) (2 7) (3 3) (4 8) (5 2) (6 5) (7 1) (8 6)) ((1 4) (2 2) (3 7) (4 3) (5 6) (6 8) (7 5) (8 1)) ((1 5) (2 2) (3 4) (4 7) (5 3) (6 8) (7 6) (8 1)) ((1 3) (2 5) (3 2) (4 8) (5 6) (6 4) (7 7) (8 1)) ((1 3) (2 6) (3 4) (4 2) (5 8) (6 5) (7 7) (8 1)))
(define (sort-cadr queens-cand)
  (sort queens-cand < cadr))
(map sort-cadr queens-8)
; (((1 1) (5 2) (8 3) (6 4) (3 5) (7 6) (2 7) (4 8)) ((1 1) (6 2) (8 3) (3 4) (7 5) (4 6) (2 7) (5 8)) ((1 1) (7 2) (4 3) (6 4) (8 5) (2 6) (5 7) (3 8)) ((1 1) (7 2) (5 3) (8 4) (2 5) (4 6) (6 7) (3 8)) ((2 1) (4 2) (6 3) (8 4) (3 5) (1 6) (7 7) (5 8)) ((2 1) (5 2) (7 3) (1 4) (3 5) (8 6) (6 7) (4 8)) ((2 1) (5 2) (7 3) (4 4) (1 5) (8 6) (6 7) (3 8)) ((2 1) (6 2) (1 3) (7 4) (4 5) (8 6) (3 7) (5 8)) ((2 1) (6 2) (8 3) (3 4) (1 5) (4 6) (7 7) (5 8)) ((2 1) (7 2) (3 3) (6 4) (8 5) (5 6) (1 7) (4 8)) ((2 1) (7 2) (5 3) (8 4) (1 5) (4 6) (6 7) (3 8)) ((2 1) (8 2) (6 3) (1 4) (3 5) (5 6) (7 7) (4 8)) ((3 1) (1 2) (7 3) (5 4) (8 5) (2 6) (4 7) (6 8)) ((3 1) (5 2) (2 3) (8 4) (1 5) (7 6) (4 7) (6 8)) ((3 1) (5 2) (2 3) (8 4) (6 5) (4 6) (7 7) (1 8)) ((3 1) (5 2) (7 3) (1 4) (4 5) (2 6) (8 7) (6 8)) ((3 1) (5 2) (8 3) (4 4) (1 5) (7 6) (2 7) (6 8)) ((3 1) (6 2) (2 3) (5 4) (8 5) (1 6) (7 7) (4 8)) ((3 1) (6 2) (2 3) (7 4) (1 5) (4 6) (8 7) (5 8)) ((3 1) (6 2) (2 3) (7 4) (5 5) (1 6) (8 7) (4 8)) ((3 1) (6 2) (4 3) (1 4) (8 5) (5 6) (7 7) (2 8)) ((3 1) (6 2) (4 3) (2 4) (8 5) (5 6) (7 7) (1 8)) ((3 1) (6 2) (8 3) (1 4) (4 5) (7 6) (5 7) (2 8)) ((3 1) (6 2) (8 3) (1 4) (5 5) (7 6) (2 7) (4 8)) ((3 1) (6 2) (8 3) (2 4) (4 5) (1 6) (7 7) (5 8)) ((3 1) (7 2) (2 3) (8 4) (5 5) (1 6) (4 7) (6 8)) ((3 1) (7 2) (2 3) (8 4) (6 5) (4 6) (1 7) (5 8)) ((3 1) (8 2) (4 3) (7 4) (1 5) (6 6) (2 7) (5 8)) ((4 1) (1 2) (5 3) (8 4) (2 5) (7 6) (3 7) (6 8)) ((4 1) (1 2) (5 3) (8 4) (6 5) (3 6) (7 7) (2 8)) ((4 1) (2 2) (5 3) (8 4) (6 5) (1 6) (3 7) (7 8)) ((4 1) (2 2) (7 3) (3 4) (6 5) (8 6) (1 7) (5 8)) ((4 1) (2 2) (7 3) (3 4) (6 5) (8 6) (5 7) (1 8)) ((4 1) (2 2) (7 3) (5 4) (1 5) (8 6) (6 7) (3 8)) ((4 1) (2 2) (8 3) (5 4) (7 5) (1 6) (3 7) (6 8)) ((4 1) (2 2) (8 3) (6 4) (1 5) (3 6) (5 7) (7 8)) ((4 1) (6 2) (1 3) (5 4) (2 5) (8 6) (3 7) (7 8)) ((4 1) (6 2) (8 3) (2 4) (7 5) (1 6) (3 7) (5 8)) ((4 1) (6 2) (8 3) (3 4) (1 5) (7 6) (5 7) (2 8)) ((4 1) (7 2) (1 3) (8 4) (5 5) (2 6) (6 7) (3 8)) ((4 1) (7 2) (3 3) (8 4) (2 5) (5 6) (1 7) (6 8)) ((4 1) (7 2) (5 3) (2 4) (6 5) (1 6) (3 7) (8 8)) ((4 1) (7 2) (5 3) (3 4) (1 5) (6 6) (8 7) (2 8)) ((4 1) (8 2) (1 3) (3 4) (6 5) (2 6) (7 7) (5 8)) ((4 1) (8 2) (1 3) (5 4) (7 5) (2 6) (6 7) (3 8)) ((4 1) (8 2) (5 3) (3 4) (1 5) (7 6) (2 7) (6 8)) ((5 1) (1 2) (4 3) (6 4) (8 5) (2 6) (7 7) (3 8)) ((5 1) (1 2) (8 3) (4 4) (2 5) (7 6) (3 7) (6 8)) ((5 1) (1 2) (8 3) (6 4) (3 5) (7 6) (2 7) (4 8)) ((5 1) (2 2) (4 3) (6 4) (8 5) (3 6) (1 7) (7 8)) ((5 1) (2 2) (4 3) (7 4) (3 5) (8 6) (6 7) (1 8)) ((5 1) (2 2) (6 3) (1 4) (7 5) (4 6) (8 7) (3 8)) ((5 1) (2 2) (8 3) (1 4) (4 5) (7 6) (3 7) (6 8)) ((5 1) (3 2) (1 3) (6 4) (8 5) (2 6) (4 7) (7 8)) ((5 1) (3 2) (1 3) (7 4) (2 5) (8 6) (6 7) (4 8)) ((5 1) (3 2) (8 3) (4 4) (7 5) (1 6) (6 7) (2 8)) ((5 1) (7 2) (1 3) (3 4) (8 5) (6 6) (4 7) (2 8)) ((5 1) (7 2) (1 3) (4 4) (2 5) (8 6) (6 7) (3 8)) ((5 1) (7 2) (2 3) (4 4) (8 5) (1 6) (3 7) (6 8)) ((5 1) (7 2) (2 3) (6 4) (3 5) (1 6) (4 7) (8 8)) ((5 1) (7 2) (2 3) (6 4) (3 5) (1 6) (8 7) (4 8)) ((5 1) (7 2) (4 3) (1 4) (3 5) (8 6) (6 7) (2 8)) ((5 1) (8 2) (4 3) (1 4) (3 5) (6 6) (2 7) (7 8)) ((5 1) (8 2) (4 3) (1 4) (7 5) (2 6) (6 7) (3 8)) ((6 1) (1 2) (5 3) (2 4) (8 5) (3 6) (7 7) (4 8)) ((6 1) (2 2) (7 3) (1 4) (3 5) (5 6) (8 7) (4 8)) ((6 1) (2 2) (7 3) (1 4) (4 5) (8 6) (5 7) (3 8)) ((6 1) (3 2) (1 3) (7 4) (5 5) (8 6) (2 7) (4 8)) ((6 1) (3 2) (1 3) (8 4) (4 5) (2 6) (7 7) (5 8)) ((6 1) (3 2) (1 3) (8 4) (5 5) (2 6) (4 7) (7 8)) ((6 1) (3 2) (5 3) (7 4) (1 5) (4 6) (2 7) (8 8)) ((6 1) (3 2) (5 3) (8 4) (1 5) (4 6) (2 7) (7 8)) ((6 1) (3 2) (7 3) (2 4) (4 5) (8 6) (1 7) (5 8)) ((6 1) (3 2) (7 3) (2 4) (8 5) (5 6) (1 7) (4 8)) ((6 1) (3 2) (7 3) (4 4) (1 5) (8 6) (2 7) (5 8)) ((6 1) (4 2) (1 3) (5 4) (8 5) (2 6) (7 7) (3 8)) ((6 1) (4 2) (2 3) (8 4) (5 5) (7 6) (1 7) (3 8)) ((6 1) (4 2) (7 3) (1 4) (3 5) (5 6) (2 7) (8 8)) ((6 1) (4 2) (7 3) (1 4) (8 5) (2 6) (5 7) (3 8)) ((6 1) (8 2) (2 3) (4 4) (1 5) (7 6) (5 7) (3 8)) ((7 1) (1 2) (3 3) (8 4) (6 5) (4 6) (2 7) (5 8)) ((7 1) (2 2) (4 3) (1 4) (8 5) (5 6) (3 7) (6 8)) ((7 1) (2 2) (6 3) (3 4) (1 5) (4 6) (8 7) (5 8)) ((7 1) (3 2) (1 3) (6 4) (8 5) (5 6) (2 7) (4 8)) ((7 1) (3 2) (8 3) (2 4) (5 5) (1 6) (6 7) (4 8)) ((7 1) (4 2) (2 3) (5 4) (8 5) (1 6) (3 7) (6 8)) ((7 1) (4 2) (2 3) (8 4) (6 5) (1 6) (3 7) (5 8)) ((7 1) (5 2) (3 3) (1 4) (6 5) (8 6) (2 7) (4 8)) ((8 1) (2 2) (4 3) (1 4) (7 5) (5 6) (3 7) (6 8)) ((8 1) (2 2) (5 3) (3 4) (1 5) (7 6) (4 7) (6 8)) ((8 1) (3 2) (1 3) (6 4) (2 5) (5 6) (7 7) (4 8)) ((8 1) (4 2) (1 3) (3 4) (6 5) (2 6) (7 7) (5 8)))